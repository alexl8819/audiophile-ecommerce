---
export const prerender = false;

import { Link } from 'react-aria-components';
import { db, sql, isDbError } from 'astro:db';

import Layout from '../../layouts/Layout.astro';
import Header from '../../components/Header';
import Footer from '../../components/Footer.astro';
import { CategoryProductCard, ProductCard, RecommendedProductCard } from '../../components/Card';
import { type Product, type Item, type RecommendedProduct } from '../../lib/constants';

const { category, productId } = Astro.params;

let products;

// TODO: cache
// TODO: use proper drizzle-orm query
const statement = sql`
	SELECT p1.*, '[' || GROUP_CONCAT(json_object('name', p2.name, 'slug', p2.slug, 'category', p2.category)) || ']' AS recommendations FROM Recommendations r JOIN Products p1 ON r.product = p1.id JOIN Products p2 ON r.similar = p2.id WHERE p1.slug = ${productId} AND p1.category = ${category} GROUP BY p1.id;
`.mapWith(String);

try {
    products = await db.all(statement);
} catch (err) {
    if (isDbError(err)) {
        console.info('LibSQL related error');
    }
    console.error(err);
    return new Response('An unexpected error occurred', { status: 500 });
}

if (!products || !products.length) {
    return Astro.redirect('/404');
}

const selectedProduct = (products[0] as Product);
selectedProduct.included = JSON.parse(selectedProduct.included as string);
selectedProduct.recommendations = JSON.parse(selectedProduct.recommendations as string);
---

<Layout subtitle={selectedProduct.name}>
	<Header client:load />
	<main class="container py-2 mb-8">
		<div class="mx-6">
			<Link href={`/${category}`}>Back</Link>
		</div>
		<section class="my-12 mx-6">
            <ProductCard
                isPreview={false}
                name={selectedProduct.name}
                description={selectedProduct.description}
                features={selectedProduct.features}
                category={selectedProduct.category}
                productId={selectedProduct.slug}
                galleryImages={selectedProduct.images}
                isNew={selectedProduct.new}
                price={selectedProduct.price}
                includes={selectedProduct.included as Array<Item>}
                availableQuantity={1}
                client:visible         
            />
		</section>
		<section class="my-12 mx-6">
			<RecommendedProductCard 
				recommendations={selectedProduct.recommendations as Array<RecommendedProduct>}
				client:visible
			/>
		</section>
		<section class="my-20">
			<ol class="list-none flex flex-col space-y-16">
				<li class="mx-6">
					<CategoryProductCard category='headphones' url='/headphones' client:visible />
				</li>
				<li class="mx-6">
					<CategoryProductCard category='speakers' url='/speakers' client:visible />
				</li>
				<li class="mx-6">
					<CategoryProductCard category='earphones' url='/earphones' client:visible />
				</li>
			</ol>
		</section>
	</main>
	<Footer navLinks={[
		{ name: 'Home', url: '/' }, 
		{ name: 'Headphones', url: '/headphones' }, 
		{ name: 'Speakers', url: '/speakers' }, 
		{ name: 'Earphones', url: '/earphones' }
	]} />
</Layout>
